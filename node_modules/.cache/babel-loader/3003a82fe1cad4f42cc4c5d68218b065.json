{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\"; // this component is simple enough that tests would be purely tautological.\n\n/* istanbul ignore next */\n\nvar TextArea =\n/** @class */\nfunction (_super) {\n  __extends(TextArea, _super);\n\n  function TextArea() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n\n    _this.handleChange = function (e) {\n      if (_this.props.growVertically) {\n        _this.setState({\n          height: e.target.scrollHeight\n        });\n      }\n\n      if (_this.props.onChange != null) {\n        _this.props.onChange(e);\n      }\n    }; // hold an internal ref for growVertically\n\n\n    _this.handleInternalRef = function (ref) {\n      _this.internalTextAreaRef = ref;\n\n      if (_this.props.inputRef != null) {\n        _this.props.inputRef(ref);\n      }\n    };\n\n    return _this;\n  }\n\n  TextArea.prototype.componentDidMount = function () {\n    if (this.props.growVertically) {\n      this.setState({\n        height: this.internalTextAreaRef.scrollHeight\n      });\n    }\n  };\n\n  TextArea.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        fill = _b.fill,\n        inputRef = _b.inputRef,\n        intent = _b.intent,\n        large = _b.large,\n        small = _b.small,\n        growVertically = _b.growVertically,\n        htmlProps = __rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n\n    var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {}, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a), className); // add explicit height style while preserving user-supplied styles if they exist\n\n    var _c = htmlProps.style,\n        style = _c === void 0 ? {} : _c;\n\n    if (growVertically && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = __assign(__assign({}, style), {\n        height: this.state.height + \"px\"\n      });\n    }\n\n    return React.createElement(\"textarea\", __assign({}, htmlProps, {\n      className: rootClasses,\n      onChange: this.handleChange,\n      ref: this.handleInternalRef,\n      style: style\n    }));\n  };\n\n  TextArea.displayName = DISPLAYNAME_PREFIX + \".TextArea\";\n  TextArea = __decorate([polyfill], TextArea);\n  return TextArea;\n}(AbstractPureComponent2);\n\nexport { TextArea };","map":{"version":3,"sources":["../../../../src/components/forms/textArea.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\nvar TextArea = /** @class */ (function (_super) {\n    __extends(TextArea, _super);\n    function TextArea() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {};\n        _this.handleChange = function (e) {\n            if (_this.props.growVertically) {\n                _this.setState({\n                    height: e.target.scrollHeight,\n                });\n            }\n            if (_this.props.onChange != null) {\n                _this.props.onChange(e);\n            }\n        };\n        // hold an internal ref for growVertically\n        _this.handleInternalRef = function (ref) {\n            _this.internalTextAreaRef = ref;\n            if (_this.props.inputRef != null) {\n                _this.props.inputRef(ref);\n            }\n        };\n        return _this;\n    }\n    TextArea.prototype.componentDidMount = function () {\n        if (this.props.growVertically) {\n            this.setState({\n                height: this.internalTextAreaRef.scrollHeight,\n            });\n        }\n    };\n    TextArea.prototype.render = function () {\n        var _a;\n        var _b = this.props, className = _b.className, fill = _b.fill, inputRef = _b.inputRef, intent = _b.intent, large = _b.large, small = _b.small, growVertically = _b.growVertically, htmlProps = __rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n        var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {},\n            _a[Classes.FILL] = fill,\n            _a[Classes.LARGE] = large,\n            _a[Classes.SMALL] = small,\n            _a), className);\n        // add explicit height style while preserving user-supplied styles if they exist\n        var _c = htmlProps.style, style = _c === void 0 ? {} : _c;\n        if (growVertically && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = __assign(__assign({}, style), { height: this.state.height + \"px\" });\n        }\n        return (React.createElement(\"textarea\", __assign({}, htmlProps, { className: rootClasses, onChange: this.handleChange, ref: this.handleInternalRef, style: style })));\n    };\n    TextArea.displayName = DISPLAYNAME_PREFIX + \".TextArea\";\n    TextArea = __decorate([\n        polyfill\n    ], TextArea);\n    return TextArea;\n}(AbstractPureComponent2));\nexport { TextArea };\n//# sourceMappingURL=textArea.js.map"]},"metadata":{},"sourceType":"module"}