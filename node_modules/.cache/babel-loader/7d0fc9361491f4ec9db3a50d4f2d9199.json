{"ast":null,"code":"var _extends = Object.assign || function (a) {\n  for (var b, c = 1; c < arguments.length; c++) for (var d in b = arguments[c], b) Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);\n\n  return a;\n},\n    _typeof = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol' ? function (a) {\n  return typeof a;\n} : function (a) {\n  return a && typeof Symbol == 'function' && a.constructor === Symbol && a !== Symbol.prototype ? 'symbol' : typeof a;\n};\n\nfunction _objectWithoutProperties(a, b) {\n  var c = {};\n\n  for (var d in a) b.indexOf(d) >= 0 || Object.prototype.hasOwnProperty.call(a, d) && (c[d] = a[d]);\n\n  return c;\n}\n\nimport React from 'react';\nimport unquote from 'unquote';\nvar ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap'\n},\n    namedCodesToUnicode = {\n  amp: '&',\n  apos: '\\'',\n  gt: '>',\n  lt: '<',\n  nbsp: '\\xA0',\n  quot: '\\u201C'\n},\n    DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script'],\n    ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n    AUTOLINK_MAILTO_CHECK_R = /mailto:/i,\n    BLOCK_END_R = /\\n{2,}$/,\n    BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n    BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm,\n    BREAK_LINE_R = /^ {2,}\\n/,\n    BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n    CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n    CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n    CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n    CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/,\n    CR_NEWLINE_R = /\\r\\n?/g,\n    FOOTNOTE_R = /^\\[\\^(.*)\\](:.*)\\n/,\n    FOOTNOTE_REFERENCE_R = /^\\[\\^(.*)\\]/,\n    FORMFEED_R = /\\f/g,\n    GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/,\n    HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/,\n    HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n    HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n    HTML_CHAR_CODE_R = /&([a-z]+);/g,\n    HTML_COMMENT_R = /^<!--.*?-->/,\n    HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n    HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n    INTERPOLATION_R = /^\\{.*\\}$/,\n    LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n    LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/,\n    LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/,\n    LIST_ITEM_END_R = / *\\n+$/,\n    LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/,\n    CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi,\n    NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n    PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/,\n    REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/,\n    REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    SQUARE_BRACKETS_R = /(\\[|\\])/g,\n    SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n    TAB_R = /\\t/g,\n    TABLE_SEPARATOR_R = /^ *\\| */,\n    TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g,\n    TABLE_CELL_END_TRIM = / *$/,\n    TABLE_CENTER_ALIGN = /^ *:-+: *$/,\n    TABLE_LEFT_ALIGN = /^ *:-+ *$/,\n    TABLE_RIGHT_ALIGN = /^ *-+: *$/,\n    TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n    TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/,\n    TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n    TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/,\n    TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n    TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g,\n    HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/,\n    UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi,\n    LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)',\n    LIST_ITEM_PREFIX = '( *)((?:[*+-]|\\\\d+\\\\.)) +',\n    LIST_ITEM_PREFIX_R = /^( *)((?:[*+-]|\\d+\\.)) +/,\n    LIST_ITEM_R = /( *)((?:[*+-]|\\d+\\.)) +[^\\n]*(?:\\n(?!\\1(?:[*+-]|\\d+\\.) )[^\\n]*)*(\\n|$)/gm,\n    LIST_R = /^( *)((?:[*+-]|\\d+\\.)) [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1(?:[*+-]|\\d+\\.) (?!(?:[*+-]|\\d+\\.) ))\\n*|\\s*\\n*$)/,\n    LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*',\n    LINK_HREF_AND_TITLE = '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*',\n    LINK_R = /^\\[((?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*)\\]\\(\\s*<?((?:[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*\\)/,\n    IMAGE_R = /^!\\[((?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*)\\]\\(\\s*<?((?:[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*\\)/,\n    BLOCK_SYNTAXES = [BLOCKQUOTE_R, CODE_BLOCK_R, CODE_BLOCK_FENCED_R, HEADING_R, HEADING_SETEXT_R, HTML_BLOCK_ELEMENT_R, HTML_COMMENT_R, HTML_SELF_CLOSING_ELEMENT_R, LIST_ITEM_R, LIST_R, NP_TABLE_R, PARAGRAPH_R];\n\nfunction containsBlockSyntax(a) {\n  return BLOCK_SYNTAXES.some(function (b) {\n    return b.test(a);\n  });\n}\n\nfunction slugify(a) {\n  return a.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a').replace(/[çÇ]/g, 'c').replace(/[ðÐ]/g, 'd').replace(/[ÈÉÊËéèêë]/g, 'e').replace(/[ÏïÎîÍíÌì]/g, 'i').replace(/[Ññ]/g, 'n').replace(/[øØœŒÕõÔôÓóÒò]/g, 'o').replace(/[ÜüÛûÚúÙù]/g, 'u').replace(/[ŸÿÝý]/g, 'y').replace(/[^a-z0-9- ]/gi, '').replace(/ /gi, '-').toLowerCase();\n}\n\nfunction parseTableAlignCapture(a) {\n  if (TABLE_RIGHT_ALIGN.test(a)) return 'right';\n  return TABLE_CENTER_ALIGN.test(a) ? 'center' : TABLE_LEFT_ALIGN.test(a) ? 'left' : null;\n}\n\nfunction parseTableRow(a, b, c) {\n  var d = c.inTable;\n  c.inTable = !0;\n  var e = b(a.trim(), c);\n  c.inTable = d;\n  var f = [[]];\n  return e.forEach(function (a, b) {\n    a.type === 'tableSeparator' ? b !== 0 && b !== e.length - 1 && f.push([]) : (a.type === 'text' && (e[b + 1] == null || e[b + 1].type === 'tableSeparator') && (a.content = a.content.replace(TABLE_CELL_END_TRIM, '')), f[f.length - 1].push(a));\n  }), f;\n}\n\nfunction parseTableAlign(a) {\n  var b = a.replace(TABLE_TRIM_PIPES, '').split('|');\n  return b.map(parseTableAlignCapture);\n}\n\nfunction parseTableCells(a, b, c) {\n  var d = a.trim().split('\\n');\n  return d.map(function (a) {\n    return parseTableRow(a, b, c);\n  });\n}\n\nfunction parseTable(a, b, c) {\n  c.inline = !0;\n  var d = parseTableRow(a[1], b, c),\n      e = parseTableAlign(a[2], b, c),\n      f = parseTableCells(a[3], b, c);\n  return c.inline = !1, {\n    align: e,\n    cells: f,\n    header: d,\n    type: 'table'\n  };\n}\n\nfunction getTableStyle(a, b) {\n  return a.align[b] == null ? {} : {\n    textAlign: a.align[b]\n  };\n}\n\nfunction normalizeAttributeKey(a) {\n  var b = a.indexOf('-');\n  return b !== -1 && a.match(HTML_CUSTOM_ATTR_R) === null && (a = a.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (a, b) {\n    return b.toUpperCase();\n  })), a;\n}\n\nfunction attributeValueToJSXPropValue(a, b) {\n  return a === 'style' ? b.split(/;\\s?/).reduce(function (a, b) {\n    var c = b.slice(0, b.indexOf(':')),\n        d = c.replace(/(-[a-z])/g, function (a) {\n      return a[1].toUpperCase();\n    });\n    return a[d] = b.slice(c.length + 1).trim(), a;\n  }, {}) : a === 'href' ? sanitizeUrl(b) : (b.match(INTERPOLATION_R) && (b = b.slice(1, b.length - 1)), b === 'true' || b !== 'false' && b);\n}\n\nfunction normalizeWhitespace(a) {\n  return a.replace(CR_NEWLINE_R, '\\n').replace(FORMFEED_R, '').replace(TAB_R, '    ');\n}\n\nfunction parserFor(a) {\n  function b(d, e) {\n    for (var f = [], g = ''; d;) for (var l = 0; l < c.length;) {\n      var h = c[l],\n          j = a[h],\n          k = j.match(d, e, g);\n\n      if (k) {\n        var i = k[0];\n        d = d.substring(i.length);\n        var m = j.parse(k, b, e);\n        m.type == null && (m.type = h), f.push(m), g = i;\n        break;\n      }\n\n      l++;\n    }\n\n    return f;\n  }\n\n  var c = Object.keys(a);\n  return process.env.NODE_ENV !== 'production' && c.forEach(function (b) {\n    var c = a[b].order;\n    process.env.NODE_ENV === 'production' || typeof c == 'number' && isFinite(c) || console.warn('markdown-to-jsx: Invalid order for rule `' + b + '`: ' + c);\n  }), c.sort(function (b, c) {\n    var d = a[b].order,\n        e = a[c].order;\n    return d === e ? b < c ? -1 : 1 : d - e;\n  }), function (a, c) {\n    return b(normalizeWhitespace(a), c);\n  };\n}\n\nfunction inlineRegex(a) {\n  return function (b, c) {\n    return c.inline ? a.exec(b) : null;\n  };\n}\n\nfunction simpleInlineRegex(a) {\n  return function (b, c) {\n    return c.inline || c.simple ? a.exec(b) : null;\n  };\n}\n\nfunction blockRegex(a) {\n  return function (b, c) {\n    return c.inline || c.simple ? null : a.exec(b);\n  };\n}\n\nfunction anyScopeRegex(a) {\n  return function (b) {\n    return a.exec(b);\n  };\n}\n\nfunction reactFor(a) {\n  return function b(c, d) {\n    if (d = d || {}, Array.isArray(c)) {\n      for (var e = d.key, f = [], g = !1, h = 0; h < c.length; h++) {\n        d.key = h;\n        var j = b(c[h], d),\n            k = typeof j == 'string';\n        k && g ? f[f.length - 1] += j : f.push(j), g = k;\n      }\n\n      return d.key = e, f;\n    }\n\n    return a(c, b, d);\n  };\n}\n\nfunction sanitizeUrl(a) {\n  try {\n    var b = decodeURIComponent(a);\n    if (b.match(/^\\s*javascript:/i)) return process.env.NODE_ENV !== 'production' && console.warn('Anchor URL contains an unsafe JavaScript expression, it will not be rendered.', b), null;\n  } catch (b) {\n    return process.env.NODE_ENV !== 'production' && console.warn('Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.', a), null;\n  }\n\n  return a;\n}\n\nfunction unescapeUrl(a) {\n  return a.replace(UNESCAPE_URL_R, '$1');\n}\n\nfunction parseInline(a, b, c) {\n  var d = c.inline || !1,\n      e = c.simple || !1;\n  c.inline = !0, c.simple = !0;\n  var f = a(b, c);\n  return c.inline = d, c.simple = e, f;\n}\n\nfunction parseSimpleInline(a, b, c) {\n  var d = c.inline || !1,\n      e = c.simple || !1;\n  c.inline = !1, c.simple = !0;\n  var f = a(b, c);\n  return c.inline = d, c.simple = e, f;\n}\n\nfunction parseBlock(a, b, c) {\n  return c.inline = !1, a(b + '\\n\\n', c);\n}\n\nfunction parseCaptureInline(a, b, c) {\n  return {\n    content: parseInline(b, a[1], c)\n  };\n}\n\nfunction captureNothing() {\n  return {};\n}\n\nfunction renderNothing() {\n  return null;\n}\n\nfunction ruleOutput(a) {\n  return function (b, c, d) {\n    return a[b.type].react(b, c, d);\n  };\n}\n\nfunction cx() {\n  for (var a = arguments.length, b = Array(a), c = 0; c < a; c++) b[c] = arguments[c];\n\n  return b.filter(Boolean).join(' ');\n}\n\nfunction get(a, b, c) {\n  for (var d = a, e = b.split('.'); e.length && (d = d[e[0]], d !== void 0);) e.shift();\n\n  return d || c;\n}\n\nfunction getTag(a, b) {\n  var c = get(b, a);\n  return c ? typeof c == 'function' || (typeof c == 'undefined' ? 'undefined' : _typeof(c)) === 'object' && 'render' in c ? c : get(b, a + '.component', a) : a;\n}\n\nvar PARSE_PRIORITY_MAX = 1,\n    PARSE_PRIORITY_HIGH = 2,\n    PARSE_PRIORITY_MED = 3,\n    PARSE_PRIORITY_LOW = 4,\n    PARSE_PRIORITY_MIN = 5;\nexport function compiler(a, b) {\n  function d(a, c) {\n    for (var d = get(b.overrides, a + '.props', {}), e = arguments.length, g = Array(e > 2 ? e - 2 : 0), h = 2; h < e; h++) g[h - 2] = arguments[h];\n\n    return f.apply(void 0, [getTag(a, b.overrides), _extends({}, c, d, {\n      className: cx(c && c.className, d.className) || void 0\n    })].concat(g));\n  }\n\n  function c(a) {\n    var c = !1;\n    b.forceInline ? c = !0 : !b.forceBlock && (c = SHOULD_RENDER_AS_BLOCK_R.test(a) === !1);\n    var e = k(j(c ? a : a.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '') + '\\n\\n', {\n      inline: c\n    })),\n        f = void 0;\n    return e.length > 1 ? f = c ? d('span', {\n      key: 'outer'\n    }, e) : d('div', {\n      key: 'outer'\n    }, e) : e.length === 1 ? (f = e[0], typeof f == 'string' && (f = d('span', {\n      key: 'outer'\n    }, f))) : f = d('span', {\n      key: 'outer'\n    }), f;\n  }\n\n  function e(a) {\n    var b = a.match(ATTR_EXTRACTOR_R);\n    return b ? b.reduce(function (a, b, d) {\n      var e = b.indexOf('=');\n\n      if (e !== -1) {\n        var f = normalizeAttributeKey(b.slice(0, e)).trim(),\n            g = unquote(b.slice(e + 1).trim()),\n            h = ATTRIBUTE_TO_JSX_PROP_MAP[f] || f,\n            i = a[h] = attributeValueToJSXPropValue(f, g);\n        (HTML_BLOCK_ELEMENT_R.test(i) || HTML_SELF_CLOSING_ELEMENT_R.test(i)) && (a[h] = React.cloneElement(c(i.trim()), {\n          key: d\n        }));\n      } else b !== 'style' && (a[ATTRIBUTE_TO_JSX_PROP_MAP[b] || b] = !0);\n\n      return a;\n    }, {}) : void 0;\n  }\n\n  b = b || {}, b.overrides = b.overrides || {}, b.slugify = b.slugify || slugify, b.namedCodesToUnicode = b.namedCodesToUnicode ? _extends({}, namedCodesToUnicode, b.namedCodesToUnicode) : namedCodesToUnicode;\n  var f = b.createElement || React.createElement;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof a != 'string') throw new Error('markdown-to-jsx: the first argument must be\\n                             a string');\n    if (Object.prototype.toString.call(b.overrides) !== '[object Object]') throw new Error('markdown-to-jsx: options.overrides (second argument property) must be\\n                             undefined or an object literal with shape:\\n                             {\\n                                htmltagname: {\\n                                    component: string|ReactComponent(optional),\\n                                    props: object(optional)\\n                                }\\n                             }');\n  }\n\n  var g = [],\n      h = {},\n      i = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''), c)\n        };\n      },\n      react: function e(a, b, c) {\n        return d('blockquote', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react: function e(a, b, c) {\n        return d('br', {\n          key: c.key\n        });\n      }\n    },\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react: function e(a, b, c) {\n        return d('hr', {\n          key: c.key\n        });\n      }\n    },\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function c(a) {\n        var b = a[0].replace(/^ {4}/gm, '').replace(/\\n+$/, '');\n        return {\n          content: b,\n          lang: void 0\n        };\n      },\n      react: function e(a, b, c) {\n        return d('pre', {\n          key: c.key\n        }, d('code', {\n          className: a.lang ? 'lang-' + a.lang : ''\n        }, a.content));\n      }\n    },\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          content: a[3],\n          lang: a[2] || void 0,\n          type: 'codeBlock'\n        };\n      }\n    },\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: function b(a) {\n        return {\n          content: a[2]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('code', {\n          key: c.key\n        }, a.content);\n      }\n    },\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return g.push({\n          footnote: a[2],\n          identifier: a[1]\n        }), {};\n      },\n      react: renderNothing\n    },\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          content: a[1],\n          target: '#' + a[1]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('a', {\n          key: c.key,\n          href: sanitizeUrl(a.target)\n        }, d('sup', {\n          key: c.key\n        }, a.content));\n      }\n    },\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          completed: a[1].toLowerCase() === 'x'\n        };\n      },\n      react: function e(a, b, c) {\n        return d('input', {\n          checked: a.completed,\n          key: c.key,\n          readOnly: !0,\n          type: 'checkbox'\n        });\n      }\n    },\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function e(a, c, d) {\n        return {\n          content: parseInline(c, a[2], d),\n          id: b.slugify(a[2]),\n          level: a[1].length\n        };\n      },\n      react: function f(a, b, c) {\n        var e = 'h' + a.level;\n        return d(e, {\n          id: a.id,\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function d(a, b, c) {\n        return {\n          content: parseInline(b, a[1], c),\n          level: a[2] === '=' ? 1 : 2,\n          type: 'heading'\n        };\n      }\n    },\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function a() {\n        return {};\n      },\n      react: renderNothing\n    },\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          alt: a[1],\n          target: unescapeUrl(a[2]),\n          title: a[3]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('img', {\n          key: c.key,\n          alt: a.alt || void 0,\n          title: a.title || void 0,\n          src: sanitizeUrl(a.target)\n        });\n      }\n    },\n    link: {\n      match: inlineRegex(LINK_R, !1),\n      order: PARSE_PRIORITY_LOW,\n      parse: function d(a, b, c) {\n        return {\n          content: parseSimpleInline(b, a[1], c),\n          target: unescapeUrl(a[2]),\n          title: a[3]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('a', {\n          key: c.key,\n          href: sanitizeUrl(a.target),\n          title: a.title\n        }, b(a.content, c));\n      }\n    },\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          content: [{\n            content: a[1],\n            type: 'text'\n          }],\n          target: a[1],\n          type: 'link'\n        };\n      }\n    },\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          content: [{\n            content: a[1],\n            type: 'text'\n          }],\n          target: a[1],\n          title: void 0,\n          type: 'link'\n        };\n      }\n    },\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function d(a) {\n        var b = a[1],\n            c = a[1];\n        return AUTOLINK_MAILTO_CHECK_R.test(c) || (c = 'mailto:' + c), {\n          content: [{\n            content: b.replace('mailto:', ''),\n            type: 'text'\n          }],\n          target: c,\n          type: 'link'\n        };\n      }\n    },\n    list: {\n      match: function f(a, b, c) {\n        var d = LIST_LOOKBEHIND_R.exec(c),\n            e = b._list || !b.inline;\n        return d && e ? (a = d[1] + a, LIST_R.exec(a)) : null;\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function j(a, b, c) {\n        var d = a[2],\n            e = d.length > 1,\n            f = e ? +d : void 0,\n            g = a[0].replace(BLOCK_END_R, '\\n').match(LIST_ITEM_R),\n            h = !1,\n            i = g.map(function (a, d) {\n          var e = LIST_ITEM_PREFIX_R.exec(a)[0].length,\n              f = new RegExp('^ {1,' + e + '}', 'gm'),\n              i = a.replace(f, '').replace(LIST_ITEM_PREFIX_R, ''),\n              j = d === g.length - 1,\n              k = i.indexOf('\\n\\n') !== -1,\n              l = k || j && h;\n          h = l;\n          var m = c.inline,\n              n = c._list;\n          c._list = !0;\n          var o;\n          l ? (c.inline = !1, o = i.replace(LIST_ITEM_END_R, '\\n\\n')) : (c.inline = !0, o = i.replace(LIST_ITEM_END_R, ''));\n          var p = b(o, c);\n          return c.inline = m, c._list = n, p;\n        });\n        return {\n          items: i,\n          ordered: e,\n          start: f\n        };\n      },\n      react: function f(a, b, c) {\n        var e = a.ordered ? 'ol' : 'ul';\n        return d(e, {\n          key: c.key,\n          start: a.start\n        }, a.items.map(function (a, e) {\n          return d('li', {\n            key: e\n          }, b(a, c));\n        }));\n      }\n    },\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: captureNothing,\n      react: function a() {\n        return '\\n';\n      }\n    },\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react: function e(a, b, c) {\n        return d('p', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return h[a[1]] = {\n          target: a[2],\n          title: a[4]\n        }, {};\n      },\n      react: renderNothing\n    },\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function b(a) {\n        return {\n          alt: a[1] || void 0,\n          ref: a[2]\n        };\n      },\n      react: function e(a, b, c) {\n        return d('img', {\n          key: c.key,\n          alt: a.alt,\n          src: sanitizeUrl(h[a.ref].target),\n          title: h[a.ref].title\n        });\n      }\n    },\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[1], c),\n          fallbackContent: b(a[0].replace(SQUARE_BRACKETS_R, '\\\\$1'), c),\n          ref: a[2]\n        };\n      },\n      react: function e(a, b, c) {\n        return h[a.ref] ? d('a', {\n          key: c.key,\n          href: sanitizeUrl(h[a.ref].target),\n          title: h[a.ref].title\n        }, b(a.content, c)) : d('span', {\n          key: c.key\n        }, b(a.fallbackContent, c));\n      }\n    },\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: parseTable,\n      react: function f(a, b, e) {\n        return d('table', {\n          key: e.key\n        }, d('thead', null, d('tr', null, a.header.map(function (c, f) {\n          return d('th', {\n            key: f,\n            style: getTableStyle(a, f)\n          }, b(c, e));\n        }))), d('tbody', null, a.cells.map(function (c, f) {\n          return d('tr', {\n            key: f\n          }, c.map(function (f, g) {\n            return d('td', {\n              key: g,\n              style: getTableStyle(a, g)\n            }, b(f, e));\n          }));\n        })));\n      }\n    },\n    tableSeparator: {\n      match: function c(a, b) {\n        return b.inTable ? TABLE_SEPARATOR_R.exec(a) : null;\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function a() {\n        return {\n          type: 'tableSeparator'\n        };\n      },\n      react: function a() {\n        return ' | ';\n      }\n    },\n    text: {\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: PARSE_PRIORITY_MIN,\n      parse: function c(a) {\n        return {\n          content: a[0].replace(HTML_CHAR_CODE_R, function (a, c) {\n            return b.namedCodesToUnicode[c] ? b.namedCodesToUnicode[c] : a;\n          })\n        };\n      },\n      react: function b(a) {\n        return a.content;\n      }\n    },\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: PARSE_PRIORITY_MED,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[2], c)\n        };\n      },\n      react: function e(a, b, c) {\n        return d('strong', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: function d(a, b, c) {\n        return {\n          content: b(a[2], c)\n        };\n      },\n      react: function e(a, b, c) {\n        return d('em', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    },\n    textEscaped: {\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: function b(a) {\n        return {\n          content: a[1],\n          type: 'text'\n        };\n      }\n    },\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react: function e(a, b, c) {\n        return d('del', {\n          key: c.key\n        }, b(a.content, c));\n      }\n    }\n  };\n  b.disableParsingRawHTML !== !0 && (i.htmlBlock = {\n    match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n    order: PARSE_PRIORITY_HIGH,\n    parse: function l(a, b, c) {\n      var d = a[3].match(HTML_LEFT_TRIM_AMOUNT_R),\n          f = d[1],\n          g = new RegExp('^' + f, 'gm'),\n          h = a[3].replace(g, ''),\n          i = containsBlockSyntax(h) ? parseBlock : parseInline,\n          j = a[1].toLowerCase(),\n          k = DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(j) !== -1;\n      return {\n        attrs: e(a[2]),\n        content: k ? a[3] : i(b, h, c),\n        noInnerParse: k,\n        tag: k ? j : a[1]\n      };\n    },\n    react: function e(a, b, c) {\n      return d(a.tag, _extends({\n        key: c.key\n      }, a.attrs), a.noInnerParse ? a.content : b(a.content, c));\n    }\n  }, i.htmlSelfClosing = {\n    match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n    order: PARSE_PRIORITY_HIGH,\n    parse: function b(a) {\n      return {\n        attrs: e(a[2] || ''),\n        tag: a[1]\n      };\n    },\n    react: function e(a, b, c) {\n      return d(a.tag, _extends({}, a.attrs, {\n        key: c.key\n      }));\n    }\n  });\n  var j = parserFor(i),\n      k = reactFor(ruleOutput(i)),\n      l = c(function (a) {\n    return a.replace(/<!--[\\s\\S]*?(?:-->)/g, '');\n  }(a));\n  return g.length && l.props.children.push(d('footer', {\n    key: 'footer'\n  }, g.map(function (a) {\n    return d('div', {\n      id: a.identifier,\n      key: a.identifier\n    }, a.identifier, k(j(a.footnote, {\n      inline: !0\n    })));\n  }))), l;\n}\nexport default function Markdown(a) {\n  var b = a.children,\n      c = a.options,\n      d = _objectWithoutProperties(a, ['children', 'options']);\n\n  return React.cloneElement(compiler(b, c), d);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var PropTypes = require('prop-types');\n\n  Markdown.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object\n  };\n}","map":{"version":3,"sources":["../index.js"],"names":[],"mappings":"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","sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react';\nimport unquote from 'unquote';\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n};\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n};\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script'];\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi;\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\nconst BLOCK_END_R = /\\n{2,}$/;\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/;\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm;\nconst BREAK_LINE_R = /^ {2,}\\n/;\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/;\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/;\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/;\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/;\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/;\nconst CR_NEWLINE_R = /\\r\\n?/g;\nconst FOOTNOTE_R = /^\\[\\^(.*)\\](:.*)\\n/;\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^(.*)\\]/;\nconst FORMFEED_R = /\\f/g;\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/;\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/;\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/;\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i;\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g;\n\nconst HTML_COMMENT_R = /^<!--.*?-->/;\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/;\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i;\nconst INTERPOLATION_R = /^\\{.*\\}$/;\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/;\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/;\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/;\nconst LIST_ITEM_END_R = / *\\n+$/;\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi;\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/;\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/;\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/;\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g;\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/;\nconst TAB_R = /\\t/g;\nconst TABLE_SEPARATOR_R = /^ *\\| */;\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g;\nconst TABLE_CELL_END_TRIM = / *$/;\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/;\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/;\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/;\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/;\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/;\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/;\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i;\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g;\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/;\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi;\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)';\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +';\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX);\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n);\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n);\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*';\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*';\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n];\n\nfunction containsBlockSyntax(input) {\n  return BLOCK_SYNTAXES.some(r => r.test(input));\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase();\n}\n\nfunction parseTableAlignCapture(alignCapture) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right';\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center';\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left';\n  }\n\n  return null;\n}\n\nfunction parseTableRow(source, parse, state) {\n  const prevInTable = state.inTable;\n  state.inTable = true;\n  const tableRow = parse(source.trim(), state);\n  state.inTable = prevInTable;\n\n  let cells = [[]];\n  tableRow.forEach(function(node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n        if (i !== 0 && i !== tableRow.length - 1) {\n          // Split the current row:\n          cells.push([]);\n        }\n    } else {\n      if (node.type === 'text' && (\n        tableRow[i + 1] == null ||\n        tableRow[i + 1].type === 'tableSeparator'\n      )) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, \"\");\n      }\n      cells[cells.length - 1].push(node);\n    }\n  });\n  return cells;\n}\n\nfunction parseTableAlign(source /*, parse, state*/) {\n  const alignText = source\n    .replace(TABLE_TRIM_PIPES, '')\n    .split('|');\n\n  return alignText.map(parseTableAlignCapture);\n}\n\nfunction parseTableCells(source, parse, state) {\n  const rowsText = source\n    .trim()\n    .split('\\n');\n\n  return rowsText.map(function(rowText) {\n      return parseTableRow(rowText, parse, state);\n  });\n}\n\nfunction parseTable(capture, parse, state) {\n  state.inline = true;\n  const header = parseTableRow(capture[1], parse, state);\n  const align = parseTableAlign(capture[2], parse, state);\n  const cells = parseTableCells(capture[3], parse, state);\n  state.inline = false;\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  };\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      };\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-');\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function(_, letter) {\n      return letter.toUpperCase();\n    });\n  }\n\n  return key;\n}\n\nfunction attributeValueToJSXPropValue(key, value) {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function(styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'));\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      );\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim();\n\n      return styles;\n    }, {});\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1);\n  }\n\n  if (value === 'true') {\n    return true;\n  } else if (value === 'false') {\n    return false;\n  }\n\n  return value;\n}\n\nfunction normalizeWhitespace(source) {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ');\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(rules) {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules);\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function(type) {\n      let order = rules[type].order;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        );\n      }\n    });\n  }\n\n  ruleList.sort(function(typeA, typeB) {\n    let orderA = rules[typeA].order;\n    let orderB = rules[typeB].order;\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB;\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1;\n    }\n\n    return 1;\n  });\n\n  function nestedParse(source, state) {\n    let result = [];\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = '';\n    while (source) {\n      let i = 0;\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i];\n        const rule = rules[ruleType];\n        const capture = rule.match(source, state, prevCapture);\n\n        if (capture) {\n          const currCaptureString = capture[0];\n          source = source.substring(currCaptureString.length);\n          const parsed = rule.parse(capture, nestedParse, state);\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType;\n          }\n\n          result.push(parsed);\n\n          prevCapture = currCaptureString;\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    return result;\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state);\n  };\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return null;\n    } else {\n      return regex.exec(source);\n    }\n  };\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex) {\n  return function match(source /*, state*/) {\n    return regex.exec(source);\n  };\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(ast, state) {\n    state = state || {};\n    if (Array.isArray(ast)) {\n      const oldKey = state.key;\n      const result = [];\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false;\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i;\n\n        const nodeOut = nestedReactOutput(ast[i], state);\n        const isString = typeof nodeOut === 'string';\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut;\n        } else {\n          result.push(nodeOut);\n        }\n\n        lastWasString = isString;\n      }\n\n      state.key = oldKey;\n\n      return result;\n    }\n\n    return outputFunc(ast, nestedReactOutput, state);\n  };\n}\n\nfunction sanitizeUrl(url) {\n  try {\n    const decoded = decodeURIComponent(url);\n\n    if (decoded.match(/^\\s*javascript:/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript expression, it will not be rendered.',\n          decoded\n        );\n      }\n\n      return null;\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      );\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null;\n  }\n\n  return url;\n}\n\nfunction unescapeUrl(rawUrlString) {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1');\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = true;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = false;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\nfunction parseBlock(parse, content, state) {\n  state.inline = false;\n  return parse(content + '\\n\\n', state);\n}\n\nfunction parseCaptureInline(capture, parse, state) {\n  return {\n    content: parseInline(parse, capture[1], state),\n  };\n}\n\nfunction captureNothing() {\n  return {};\n}\n\nfunction renderNothing() {\n  return null;\n}\n\nfunction ruleOutput(rules) {\n  return function nestedRuleOutput(ast, outputFunc, state) {\n    return rules[ast.type].react(ast, outputFunc, state);\n  };\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ');\n}\n\nfunction get(src, path, fb) {\n  let ptr = src;\n  const frags = path.split('.');\n\n  while (frags.length) {\n    ptr = ptr[frags[0]];\n\n    if (ptr === undefined) break;\n    else frags.shift();\n  }\n\n  return ptr || fb;\n}\n\nfunction getTag(tag, overrides) {\n  const override = get(overrides, tag);\n\n  if (!override) return tag;\n\n  return typeof override === 'function' || (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag);\n}\n\n/**\n * anything that must scan the tree before everything else\n */\nconst PARSE_PRIORITY_MAX = 1;\n\n/**\n * scans for block-level constructs\n */\nconst PARSE_PRIORITY_HIGH = 2;\n\n/**\n * inline w/ more priority than other inline\n */\nconst PARSE_PRIORITY_MED = 3;\n\n/**\n * inline elements\n */\nconst PARSE_PRIORITY_LOW = 4;\n\n/**\n * bare text and stuff that is considered leftovers\n */\nconst PARSE_PRIORITY_MIN = 5;\n\nexport function compiler(markdown, options) {\n  options = options || {};\n  options.overrides = options.overrides || {};\n  options.slugify = options.slugify || slugify;\n  options.namedCodesToUnicode = options.namedCodesToUnicode \n    ? {...namedCodesToUnicode, ...options.namedCodesToUnicode}\n    : namedCodesToUnicode;\n\n  const createElementFn = options.createElement || React.createElement;\n\n  // eslint-disable-next-line no-unused-vars\n  function h(tag, props, ...children) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {});\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className:\n          cx(props && props.className, overrideProps.className) || undefined,\n      },\n      ...children\n    );\n  }\n\n  function compile(input) {\n    let inline = false;\n\n    if (options.forceInline) {\n      inline = true;\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false;\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    );\n\n    let jsx;\n    if (arr.length > 1) {\n      jsx = inline ? <span key=\"outer\">{arr}</span> : <div key=\"outer\">{arr}</div>;\n    } else if (arr.length === 1) {\n      jsx = arr[0];\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        jsx = <span key=\"outer\">{jsx}</span>;\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = <span key=\"outer\" />;\n    }\n\n    return jsx;\n  }\n\n  function attrStringToMap(str) {\n    const attributes = str.match(ATTR_EXTRACTOR_R);\n\n    return attributes\n      ? attributes.reduce(function(map, raw, index) {\n          const delimiterIdx = raw.indexOf('=');\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(\n              raw.slice(0, delimiterIdx)\n            ).trim();\n            const value = unquote(raw.slice(delimiterIdx + 1).trim());\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key;\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value));\n\n            if (\n              HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n              HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue)\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              );\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true;\n          }\n\n          return map;\n        }, {})\n      : undefined;\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`);\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`);\n    }\n  }\n\n  const footnotes = [];\n  const refs = {};\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        };\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        );\n      },\n    },\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />;\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />;\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let content = capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, '');\n        return {\n          content: content,\n          lang: undefined,\n        };\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        );\n      },\n    },\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        };\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>;\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        });\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${capture[1]}`,\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        );\n      },\n    },\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        };\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        );\n      },\n    },\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        };\n      },\n      react(node, output, state) {\n        const Tag = `h${node.level}`;\n        return (\n          <Tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </Tag>\n        );\n      },\n    },\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        };\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse() {\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        );\n      },\n    },\n\n    link: {\n      match: inlineRegex(LINK_R, false),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        );\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        };\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        };\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1];\n        let target = capture[1];\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target;\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        };\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture);\n        const isListBlock = state._list || !state.inline;\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source;\n\n          return LIST_R.exec(source);\n        } else {\n          return null;\n        }\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2];\n        const ordered = bullet.length > 1;\n        const start = ordered ? +bullet : undefined;\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R);\n\n        let lastItemWasAParagraph = false;\n        const itemContent = items.map(function(item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length;\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm');\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '');\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1;\n          const containsBlocks = content.indexOf('\\n\\n') !== -1;\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph);\n          lastItemWasAParagraph = thisItemIsAParagraph;\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline;\n          const oldStateList = state._list;\n          state._list = true;\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent;\n          if (thisItemIsAParagraph) {\n            state.inline = false;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n');\n          } else {\n            state.inline = true;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '');\n          }\n\n          const result = parse(adjustedContent, state);\n\n          // Restore our state before returning\n          state.inline = oldStateInline;\n          state._list = oldStateList;\n\n          return result;\n        });\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        };\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul';\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>;\n            })}\n          </Tag>\n        );\n      },\n    },\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n';\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>;\n      },\n    },\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        };\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        );\n      },\n    },\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'), state),\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : <span key={state.key}>{output(node.fallbackContent, state)}</span>;\n      },\n    },\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  );\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        );\n      },\n    },\n\n    tableSeparator: {\n      match: function(source, state) {\n        if (!state.inTable) {\n            return null;\n        }\n        return TABLE_SEPARATOR_R.exec(source);\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function() {\n          return { type: 'tableSeparator' };\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() { return ' | '; }\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: PARSE_PRIORITY_MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full;\n            }),\n        };\n      },\n      react(node /*, output, state*/) {\n        return node.content;\n      },\n    },\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: PARSE_PRIORITY_MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>;\n      },\n    },\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>;\n      },\n    },\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        };\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>;\n      },\n    },\n  };\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R);\n        const trimmer = new RegExp(`^${whitespace}`, 'gm');\n        const trimmed = capture[3].replace(trimmer, '');\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline;\n\n        const tagName = capture[1].toLowerCase();\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1;\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1]\n        };\n      },\n      react(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse ? node.content : output(node.content, state)}\n          </node.tag>\n        );\n      },\n    }\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        };\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />;\n      },\n    };\n  }\n\n  const parser = parserFor(rules);\n  const emitter = reactFor(ruleOutput(rules));\n\n  const jsx = compile(stripHtmlComments(markdown));\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={def.identifier} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          );\n        })}\n      </footer>\n    );\n  }\n\n  return jsx;\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n *\n * @param  {String}   options.children   must be a string\n * @param  {Object}   options.options    markdown-to-jsx options (arg 2 of the compiler)\n *\n * @return {ReactElement} the compiled JSX\n */\n\nexport default function Markdown({ children, options, ...props }) {\n  return React.cloneElement(compiler(children, options), props);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  const PropTypes = require('prop-types');\n\n  Markdown.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}