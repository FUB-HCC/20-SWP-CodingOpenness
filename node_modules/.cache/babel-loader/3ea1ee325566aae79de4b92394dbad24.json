{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp, safeInvoke } from \"../../common/utils\";\nimport { formatPercentage } from \"./sliderUtils\"; // props that require number values, for validation\n\nvar NUMBER_PROPS = [\"max\", \"min\", \"stepSize\", \"tickSize\", \"value\"];\n/** Internal component for a Handle with click/drag/keyboard logic to determine a new value. */\n\nvar Handle =\n/** @class */\nfunction (_super) {\n  __extends(Handle, _super);\n\n  function Handle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isMoving: false\n    };\n    _this.refHandlers = {\n      handle: function (el) {\n        return _this.handleElement = el;\n      }\n    };\n\n    _this.beginHandleMovement = function (event) {\n      document.addEventListener(\"mousemove\", _this.handleHandleMovement);\n      document.addEventListener(\"mouseup\", _this.endHandleMovement);\n\n      _this.setState({\n        isMoving: true\n      });\n\n      _this.changeValue(_this.clientToValue(_this.mouseEventClientOffset(event)));\n    };\n\n    _this.beginHandleTouchMovement = function (event) {\n      document.addEventListener(\"touchmove\", _this.handleHandleTouchMovement);\n      document.addEventListener(\"touchend\", _this.endHandleTouchMovement);\n      document.addEventListener(\"touchcancel\", _this.endHandleTouchMovement);\n\n      _this.setState({\n        isMoving: true\n      });\n\n      _this.changeValue(_this.clientToValue(_this.touchEventClientOffset(event)));\n    };\n\n    _this.endHandleMovement = function (event) {\n      _this.handleMoveEndedAt(_this.mouseEventClientOffset(event));\n    };\n\n    _this.endHandleTouchMovement = function (event) {\n      _this.handleMoveEndedAt(_this.touchEventClientOffset(event));\n    };\n\n    _this.handleMoveEndedAt = function (clientPixel) {\n      _this.removeDocumentEventListeners();\n\n      _this.setState({\n        isMoving: false\n      }); // always invoke onRelease; changeValue may call onChange if value is different\n\n\n      var onRelease = _this.props.onRelease;\n\n      var finalValue = _this.changeValue(_this.clientToValue(clientPixel));\n\n      safeInvoke(onRelease, finalValue);\n    };\n\n    _this.handleHandleMovement = function (event) {\n      _this.handleMovedTo(_this.mouseEventClientOffset(event));\n    };\n\n    _this.handleHandleTouchMovement = function (event) {\n      _this.handleMovedTo(_this.touchEventClientOffset(event));\n    };\n\n    _this.handleMovedTo = function (clientPixel) {\n      if (_this.state.isMoving && !_this.props.disabled) {\n        _this.changeValue(_this.clientToValue(clientPixel));\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var _a = _this.props,\n          stepSize = _a.stepSize,\n          value = _a.value;\n      var which = event.which;\n\n      if (which === Keys.ARROW_DOWN || which === Keys.ARROW_LEFT) {\n        _this.changeValue(value - stepSize); // this key event has been handled! prevent browser scroll on up/down\n\n\n        event.preventDefault();\n      } else if (which === Keys.ARROW_UP || which === Keys.ARROW_RIGHT) {\n        _this.changeValue(value + stepSize);\n\n        event.preventDefault();\n      }\n    };\n\n    _this.handleKeyUp = function (event) {\n      if ([Keys.ARROW_UP, Keys.ARROW_DOWN, Keys.ARROW_LEFT, Keys.ARROW_RIGHT].indexOf(event.which) >= 0) {\n        safeInvoke(_this.props.onRelease, _this.props.value);\n      }\n    };\n\n    return _this;\n  }\n\n  Handle.prototype.componentDidMount = function () {\n    // The first time this component renders, it has no ref to the handle and thus incorrectly centers the handle.\n    // Therefore, on the first mount, force a re-render to center the handle with the ref'd component.\n    this.forceUpdate();\n  };\n\n  Handle.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        disabled = _b.disabled,\n        label = _b.label,\n        min = _b.min,\n        tickSizeRatio = _b.tickSizeRatio,\n        value = _b.value,\n        vertical = _b.vertical;\n    var isMoving = this.state.isMoving; // The handle midpoint of RangeSlider is actually shifted by a margin to\n    // be on the edge of the visible handle element. Because the midpoint\n    // calculation does not take this margin into account, we instead\n    // measure the long side (which is equal to the short side plus the\n    // margin).\n\n    var handleMidpoint = this.getHandleMidpointAndOffset(this.handleElement, true).handleMidpoint;\n    var offsetRatio = (value - min) * tickSizeRatio;\n    var offsetCalc = \"calc(\" + formatPercentage(offsetRatio) + \" - \" + handleMidpoint + \"px)\";\n    var style = vertical ? {\n      bottom: offsetCalc\n    } : {\n      left: offsetCalc\n    };\n    return React.createElement(\"span\", {\n      className: classNames(Classes.SLIDER_HANDLE, (_a = {}, _a[Classes.ACTIVE] = isMoving, _a), className),\n      onKeyDown: disabled ? null : this.handleKeyDown,\n      onKeyUp: disabled ? null : this.handleKeyUp,\n      onMouseDown: disabled ? null : this.beginHandleMovement,\n      onTouchStart: disabled ? null : this.beginHandleTouchMovement,\n      ref: this.refHandlers.handle,\n      style: style,\n      tabIndex: 0\n    }, label == null ? null : React.createElement(\"span\", {\n      className: Classes.SLIDER_LABEL\n    }, label));\n  };\n\n  Handle.prototype.componentWillUnmount = function () {\n    this.removeDocumentEventListeners();\n  };\n  /** Convert client pixel to value between min and max. */\n\n\n  Handle.prototype.clientToValue = function (clientPixel) {\n    var _a = this.props,\n        stepSize = _a.stepSize,\n        tickSize = _a.tickSize,\n        value = _a.value,\n        vertical = _a.vertical;\n\n    if (this.handleElement == null) {\n      return value;\n    } // #1769: this logic doesn't work perfectly when the tick size is\n    // smaller than the handle size; it may be off by a tick or two.\n\n\n    var clientPixelNormalized = vertical ? window.innerHeight - clientPixel : clientPixel;\n    var handleCenterPixel = this.getHandleElementCenterPixel(this.handleElement);\n    var pixelDelta = clientPixelNormalized - handleCenterPixel;\n\n    if (isNaN(pixelDelta)) {\n      return value;\n    } // convert pixels to range value in increments of `stepSize`\n\n\n    return value + Math.round(pixelDelta / (tickSize * stepSize)) * stepSize;\n  };\n\n  Handle.prototype.mouseEventClientOffset = function (event) {\n    return this.props.vertical ? event.clientY : event.clientX;\n  };\n\n  Handle.prototype.touchEventClientOffset = function (event) {\n    var touch = event.changedTouches[0];\n    return this.props.vertical ? touch.clientY : touch.clientX;\n  };\n\n  Handle.prototype.validateProps = function (props) {\n    for (var _i = 0, NUMBER_PROPS_1 = NUMBER_PROPS; _i < NUMBER_PROPS_1.length; _i++) {\n      var prop = NUMBER_PROPS_1[_i];\n\n      if (typeof props[prop] !== \"number\") {\n        throw new Error(\"[Blueprint] <Handle> requires number value for \" + prop + \" prop\");\n      }\n    }\n  };\n  /** Clamp value and invoke callback if it differs from current value */\n\n\n  Handle.prototype.changeValue = function (newValue, callback) {\n    if (callback === void 0) {\n      callback = this.props.onChange;\n    }\n\n    newValue = this.clamp(newValue);\n\n    if (!isNaN(newValue) && this.props.value !== newValue) {\n      safeInvoke(callback, newValue);\n    }\n\n    return newValue;\n  };\n  /** Clamp value between min and max props */\n\n\n  Handle.prototype.clamp = function (value) {\n    return clamp(value, this.props.min, this.props.max);\n  };\n\n  Handle.prototype.getHandleElementCenterPixel = function (handleElement) {\n    var _a = this.getHandleMidpointAndOffset(handleElement),\n        handleMidpoint = _a.handleMidpoint,\n        handleOffset = _a.handleOffset;\n\n    return handleOffset + handleMidpoint;\n  };\n\n  Handle.prototype.getHandleMidpointAndOffset = function (handleElement, useOppositeDimension) {\n    if (useOppositeDimension === void 0) {\n      useOppositeDimension = false;\n    }\n\n    if (handleElement == null) {\n      return {\n        handleMidpoint: 0,\n        handleOffset: 0\n      };\n    }\n\n    var vertical = this.props.vertical; // getBoundingClientRect().height includes border size; clientHeight does not.\n\n    var handleRect = handleElement.getBoundingClientRect();\n    var sizeKey = vertical ? useOppositeDimension ? \"width\" : \"height\" : useOppositeDimension ? \"height\" : \"width\"; // \"bottom\" value seems to be consistently incorrect, so explicitly\n    // calculate it using the window offset instead.\n\n    var handleOffset = vertical ? window.innerHeight - (handleRect.top + handleRect[sizeKey]) : handleRect.left;\n    return {\n      handleMidpoint: handleRect[sizeKey] / 2,\n      handleOffset: handleOffset\n    };\n  };\n\n  Handle.prototype.removeDocumentEventListeners = function () {\n    document.removeEventListener(\"mousemove\", this.handleHandleMovement);\n    document.removeEventListener(\"mouseup\", this.endHandleMovement);\n    document.removeEventListener(\"touchmove\", this.handleHandleTouchMovement);\n    document.removeEventListener(\"touchend\", this.endHandleTouchMovement);\n    document.removeEventListener(\"touchcancel\", this.endHandleTouchMovement);\n  };\n\n  Handle.displayName = DISPLAYNAME_PREFIX + \".SliderHandle\";\n  Handle = __decorate([polyfill], Handle);\n  return Handle;\n}(AbstractPureComponent2);\n\nexport { Handle };","map":{"version":3,"sources":["../../../../src/components/slider/handle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp, safeInvoke } from \"../../common/utils\";\nimport { formatPercentage } from \"./sliderUtils\";\n// props that require number values, for validation\nvar NUMBER_PROPS = [\"max\", \"min\", \"stepSize\", \"tickSize\", \"value\"];\n/** Internal component for a Handle with click/drag/keyboard logic to determine a new value. */\nvar Handle = /** @class */ (function (_super) {\n    __extends(Handle, _super);\n    function Handle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isMoving: false,\n        };\n        _this.refHandlers = {\n            handle: function (el) { return (_this.handleElement = el); },\n        };\n        _this.beginHandleMovement = function (event) {\n            document.addEventListener(\"mousemove\", _this.handleHandleMovement);\n            document.addEventListener(\"mouseup\", _this.endHandleMovement);\n            _this.setState({ isMoving: true });\n            _this.changeValue(_this.clientToValue(_this.mouseEventClientOffset(event)));\n        };\n        _this.beginHandleTouchMovement = function (event) {\n            document.addEventListener(\"touchmove\", _this.handleHandleTouchMovement);\n            document.addEventListener(\"touchend\", _this.endHandleTouchMovement);\n            document.addEventListener(\"touchcancel\", _this.endHandleTouchMovement);\n            _this.setState({ isMoving: true });\n            _this.changeValue(_this.clientToValue(_this.touchEventClientOffset(event)));\n        };\n        _this.endHandleMovement = function (event) {\n            _this.handleMoveEndedAt(_this.mouseEventClientOffset(event));\n        };\n        _this.endHandleTouchMovement = function (event) {\n            _this.handleMoveEndedAt(_this.touchEventClientOffset(event));\n        };\n        _this.handleMoveEndedAt = function (clientPixel) {\n            _this.removeDocumentEventListeners();\n            _this.setState({ isMoving: false });\n            // always invoke onRelease; changeValue may call onChange if value is different\n            var onRelease = _this.props.onRelease;\n            var finalValue = _this.changeValue(_this.clientToValue(clientPixel));\n            safeInvoke(onRelease, finalValue);\n        };\n        _this.handleHandleMovement = function (event) {\n            _this.handleMovedTo(_this.mouseEventClientOffset(event));\n        };\n        _this.handleHandleTouchMovement = function (event) {\n            _this.handleMovedTo(_this.touchEventClientOffset(event));\n        };\n        _this.handleMovedTo = function (clientPixel) {\n            if (_this.state.isMoving && !_this.props.disabled) {\n                _this.changeValue(_this.clientToValue(clientPixel));\n            }\n        };\n        _this.handleKeyDown = function (event) {\n            var _a = _this.props, stepSize = _a.stepSize, value = _a.value;\n            var which = event.which;\n            if (which === Keys.ARROW_DOWN || which === Keys.ARROW_LEFT) {\n                _this.changeValue(value - stepSize);\n                // this key event has been handled! prevent browser scroll on up/down\n                event.preventDefault();\n            }\n            else if (which === Keys.ARROW_UP || which === Keys.ARROW_RIGHT) {\n                _this.changeValue(value + stepSize);\n                event.preventDefault();\n            }\n        };\n        _this.handleKeyUp = function (event) {\n            if ([Keys.ARROW_UP, Keys.ARROW_DOWN, Keys.ARROW_LEFT, Keys.ARROW_RIGHT].indexOf(event.which) >= 0) {\n                safeInvoke(_this.props.onRelease, _this.props.value);\n            }\n        };\n        return _this;\n    }\n    Handle.prototype.componentDidMount = function () {\n        // The first time this component renders, it has no ref to the handle and thus incorrectly centers the handle.\n        // Therefore, on the first mount, force a re-render to center the handle with the ref'd component.\n        this.forceUpdate();\n    };\n    Handle.prototype.render = function () {\n        var _a;\n        var _b = this.props, className = _b.className, disabled = _b.disabled, label = _b.label, min = _b.min, tickSizeRatio = _b.tickSizeRatio, value = _b.value, vertical = _b.vertical;\n        var isMoving = this.state.isMoving;\n        // The handle midpoint of RangeSlider is actually shifted by a margin to\n        // be on the edge of the visible handle element. Because the midpoint\n        // calculation does not take this margin into account, we instead\n        // measure the long side (which is equal to the short side plus the\n        // margin).\n        var handleMidpoint = this.getHandleMidpointAndOffset(this.handleElement, true).handleMidpoint;\n        var offsetRatio = (value - min) * tickSizeRatio;\n        var offsetCalc = \"calc(\" + formatPercentage(offsetRatio) + \" - \" + handleMidpoint + \"px)\";\n        var style = vertical ? { bottom: offsetCalc } : { left: offsetCalc };\n        return (React.createElement(\"span\", { className: classNames(Classes.SLIDER_HANDLE, (_a = {}, _a[Classes.ACTIVE] = isMoving, _a), className), onKeyDown: disabled ? null : this.handleKeyDown, onKeyUp: disabled ? null : this.handleKeyUp, onMouseDown: disabled ? null : this.beginHandleMovement, onTouchStart: disabled ? null : this.beginHandleTouchMovement, ref: this.refHandlers.handle, style: style, tabIndex: 0 }, label == null ? null : React.createElement(\"span\", { className: Classes.SLIDER_LABEL }, label)));\n    };\n    Handle.prototype.componentWillUnmount = function () {\n        this.removeDocumentEventListeners();\n    };\n    /** Convert client pixel to value between min and max. */\n    Handle.prototype.clientToValue = function (clientPixel) {\n        var _a = this.props, stepSize = _a.stepSize, tickSize = _a.tickSize, value = _a.value, vertical = _a.vertical;\n        if (this.handleElement == null) {\n            return value;\n        }\n        // #1769: this logic doesn't work perfectly when the tick size is\n        // smaller than the handle size; it may be off by a tick or two.\n        var clientPixelNormalized = vertical ? window.innerHeight - clientPixel : clientPixel;\n        var handleCenterPixel = this.getHandleElementCenterPixel(this.handleElement);\n        var pixelDelta = clientPixelNormalized - handleCenterPixel;\n        if (isNaN(pixelDelta)) {\n            return value;\n        }\n        // convert pixels to range value in increments of `stepSize`\n        return value + Math.round(pixelDelta / (tickSize * stepSize)) * stepSize;\n    };\n    Handle.prototype.mouseEventClientOffset = function (event) {\n        return this.props.vertical ? event.clientY : event.clientX;\n    };\n    Handle.prototype.touchEventClientOffset = function (event) {\n        var touch = event.changedTouches[0];\n        return this.props.vertical ? touch.clientY : touch.clientX;\n    };\n    Handle.prototype.validateProps = function (props) {\n        for (var _i = 0, NUMBER_PROPS_1 = NUMBER_PROPS; _i < NUMBER_PROPS_1.length; _i++) {\n            var prop = NUMBER_PROPS_1[_i];\n            if (typeof props[prop] !== \"number\") {\n                throw new Error(\"[Blueprint] <Handle> requires number value for \" + prop + \" prop\");\n            }\n        }\n    };\n    /** Clamp value and invoke callback if it differs from current value */\n    Handle.prototype.changeValue = function (newValue, callback) {\n        if (callback === void 0) { callback = this.props.onChange; }\n        newValue = this.clamp(newValue);\n        if (!isNaN(newValue) && this.props.value !== newValue) {\n            safeInvoke(callback, newValue);\n        }\n        return newValue;\n    };\n    /** Clamp value between min and max props */\n    Handle.prototype.clamp = function (value) {\n        return clamp(value, this.props.min, this.props.max);\n    };\n    Handle.prototype.getHandleElementCenterPixel = function (handleElement) {\n        var _a = this.getHandleMidpointAndOffset(handleElement), handleMidpoint = _a.handleMidpoint, handleOffset = _a.handleOffset;\n        return handleOffset + handleMidpoint;\n    };\n    Handle.prototype.getHandleMidpointAndOffset = function (handleElement, useOppositeDimension) {\n        if (useOppositeDimension === void 0) { useOppositeDimension = false; }\n        if (handleElement == null) {\n            return { handleMidpoint: 0, handleOffset: 0 };\n        }\n        var vertical = this.props.vertical;\n        // getBoundingClientRect().height includes border size; clientHeight does not.\n        var handleRect = handleElement.getBoundingClientRect();\n        var sizeKey = vertical\n            ? useOppositeDimension\n                ? \"width\"\n                : \"height\"\n            : useOppositeDimension\n                ? \"height\"\n                : \"width\";\n        // \"bottom\" value seems to be consistently incorrect, so explicitly\n        // calculate it using the window offset instead.\n        var handleOffset = vertical ? window.innerHeight - (handleRect.top + handleRect[sizeKey]) : handleRect.left;\n        return { handleMidpoint: handleRect[sizeKey] / 2, handleOffset: handleOffset };\n    };\n    Handle.prototype.removeDocumentEventListeners = function () {\n        document.removeEventListener(\"mousemove\", this.handleHandleMovement);\n        document.removeEventListener(\"mouseup\", this.endHandleMovement);\n        document.removeEventListener(\"touchmove\", this.handleHandleTouchMovement);\n        document.removeEventListener(\"touchend\", this.endHandleTouchMovement);\n        document.removeEventListener(\"touchcancel\", this.endHandleTouchMovement);\n    };\n    Handle.displayName = DISPLAYNAME_PREFIX + \".SliderHandle\";\n    Handle = __decorate([\n        polyfill\n    ], Handle);\n    return Handle;\n}(AbstractPureComponent2));\nexport { Handle };\n//# sourceMappingURL=handle.js.map"]},"metadata":{},"sourceType":"module"}