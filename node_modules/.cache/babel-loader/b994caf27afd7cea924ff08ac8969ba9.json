{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { clamp } from \"../../common/utils\";\nexport function clampValue(value, min, max) {\n  // defaultProps won't work if the user passes in null, so just default\n  // to +/- infinity here instead, as a catch-all.\n  var adjustedMin = min != null ? min : -Infinity;\n  var adjustedMax = max != null ? max : Infinity;\n  return clamp(value, adjustedMin, adjustedMax);\n}\nexport function getValueOrEmptyValue(value) {\n  if (value === void 0) {\n    value = \"\";\n  }\n\n  return value.toString();\n}\n/** Returns `true` if the string represents a valid numeric value, like \"1e6\". */\n\nexport function isValueNumeric(value) {\n  // checking if a string is numeric in Typescript is a big pain, because\n  // we can't simply toss a string parameter to isFinite. below is the\n  // essential approach that jQuery uses, which involves subtracting a\n  // parsed numeric value from the string representation of the value. we\n  // need to cast the value to the `any` type to allow this operation\n  // between dissimilar types.\n  return value != null && value - parseFloat(value) + 1 >= 0;\n}\nexport function isValidNumericKeyboardEvent(e) {\n  // unit tests may not include e.key. don't bother disabling those events.\n  if (e.key == null) {\n    return true;\n  } // allow modified key strokes that may involve letters and other\n  // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n\n\n  if (e.ctrlKey || e.altKey || e.metaKey) {\n    return true;\n  } // keys that print a single character when pressed have a `key` name of\n  // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n  // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n  // to the field--and since they may have important native behaviors\n  // beyond printing a character--we don't want to disable their effects.\n\n\n  var isSingleCharKey = e.key.length === 1;\n\n  if (!isSingleCharKey) {\n    return true;\n  } // now we can simply check that the single character that wants to be printed\n  // is a floating-point number character that we're allowed to print.\n\n\n  return isFloatingPointNumericCharacter(e.key);\n}\n/**\n * A regex that matches a string of length 1 (i.e. a standalone character)\n * if and only if it is a floating-point number character as defined by W3C:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n *\n * Floating-point number characters are the only characters that can be\n * printed within a default input[type=\"number\"]. This component should\n * behave the same way when this.props.allowNumericCharactersOnly = true.\n * See here for the input[type=\"number\"].value spec:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n */\n\nvar FLOATING_POINT_NUMBER_CHARACTER_REGEX = /^[Ee0-9\\+\\-\\.]$/;\nexport function isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_NUMBER_CHARACTER_REGEX.test(character);\n}\n/**\n * Round the value to have _up to_ the specified maximum precision.\n *\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\n * more precise values, resulting in shorter strings.\n */\n\nexport function toMaxPrecision(value, maxPrecision) {\n  // round the value to have the specified maximum precision (toFixed is the wrong choice,\n  // because it would show trailing zeros in the decimal part out to the specified precision)\n  // source: http://stackoverflow.com/a/18358056/5199574\n  var scaleFactor = Math.pow(10, maxPrecision);\n  return Math.round(value * scaleFactor) / scaleFactor;\n}","map":{"version":3,"sources":["../../../../src/components/forms/numericInputUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAS,KAAT,QAAsB,oBAAtB;AAEA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAoC,GAApC,EAAkD,GAAlD,EAA8D;AAChE;AACA;AACA,MAAM,WAAW,GAAG,GAAG,IAAI,IAAP,GAAc,GAAd,GAAoB,CAAC,QAAzC;AACA,MAAM,WAAW,GAAG,GAAG,IAAI,IAAP,GAAc,GAAd,GAAoB,QAAxC;AACA,SAAO,KAAK,CAAC,KAAD,EAAQ,WAAR,EAAqB,WAArB,CAAZ;AACH;AAED,OAAM,SAAU,oBAAV,CAA+B,KAA/B,EAA0D;AAA3B,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAA2B;;AAC5D,SAAO,KAAK,CAAC,QAAN,EAAP;AACH;AAED;;AACA,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,KAAK,IAAI,IAAT,IAAkB,KAAa,GAAG,UAAU,CAAC,KAAD,CAA1B,GAAoC,CAApC,IAAyC,CAAlE;AACH;AAED,OAAM,SAAU,2BAAV,CAAsC,CAAtC,EAA4D;AAC9D;AACA,MAAI,CAAC,CAAC,GAAF,IAAS,IAAb,EAAmB;AACf,WAAO,IAAP;AACH,GAJ6D,CAM9D;AACA;;;AACA,MAAI,CAAC,CAAC,OAAF,IAAa,CAAC,CAAC,MAAf,IAAyB,CAAC,CAAC,OAA/B,EAAwC;AACpC,WAAO,IAAP;AACH,GAV6D,CAY9D;AACA;AACA;AACA;AACA;;;AACA,MAAM,eAAe,GAAG,CAAC,CAAC,GAAF,CAAM,MAAN,KAAiB,CAAzC;;AACA,MAAI,CAAC,eAAL,EAAsB;AAClB,WAAO,IAAP;AACH,GApB6D,CAsB9D;AACA;;;AACA,SAAO,+BAA+B,CAAC,CAAC,CAAC,GAAH,CAAtC;AACH;AAED;;;;;;;;;;;;AAWA,IAAM,qCAAqC,GAAG,iBAA9C;AACA,OAAM,SAAU,+BAAV,CAA0C,SAA1C,EAA2D;AAC7D,SAAO,qCAAqC,CAAC,IAAtC,CAA2C,SAA3C,CAAP;AACH;AAED;;;;;;;AAMA,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAwC,YAAxC,EAA4D;AAC9D;AACA;AACA;AACA,MAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,YAAb,CAApB;AACA,SAAO,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,WAAnB,IAAkC,WAAzC;AACH","sourceRoot":"","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { clamp } from \"../../common/utils\";\nexport function clampValue(value, min, max) {\n    // defaultProps won't work if the user passes in null, so just default\n    // to +/- infinity here instead, as a catch-all.\n    var adjustedMin = min != null ? min : -Infinity;\n    var adjustedMax = max != null ? max : Infinity;\n    return clamp(value, adjustedMin, adjustedMax);\n}\nexport function getValueOrEmptyValue(value) {\n    if (value === void 0) { value = \"\"; }\n    return value.toString();\n}\n/** Returns `true` if the string represents a valid numeric value, like \"1e6\". */\nexport function isValueNumeric(value) {\n    // checking if a string is numeric in Typescript is a big pain, because\n    // we can't simply toss a string parameter to isFinite. below is the\n    // essential approach that jQuery uses, which involves subtracting a\n    // parsed numeric value from the string representation of the value. we\n    // need to cast the value to the `any` type to allow this operation\n    // between dissimilar types.\n    return value != null && value - parseFloat(value) + 1 >= 0;\n}\nexport function isValidNumericKeyboardEvent(e) {\n    // unit tests may not include e.key. don't bother disabling those events.\n    if (e.key == null) {\n        return true;\n    }\n    // allow modified key strokes that may involve letters and other\n    // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n    if (e.ctrlKey || e.altKey || e.metaKey) {\n        return true;\n    }\n    // keys that print a single character when pressed have a `key` name of\n    // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n    // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n    // to the field--and since they may have important native behaviors\n    // beyond printing a character--we don't want to disable their effects.\n    var isSingleCharKey = e.key.length === 1;\n    if (!isSingleCharKey) {\n        return true;\n    }\n    // now we can simply check that the single character that wants to be printed\n    // is a floating-point number character that we're allowed to print.\n    return isFloatingPointNumericCharacter(e.key);\n}\n/**\n * A regex that matches a string of length 1 (i.e. a standalone character)\n * if and only if it is a floating-point number character as defined by W3C:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n *\n * Floating-point number characters are the only characters that can be\n * printed within a default input[type=\"number\"]. This component should\n * behave the same way when this.props.allowNumericCharactersOnly = true.\n * See here for the input[type=\"number\"].value spec:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n */\nvar FLOATING_POINT_NUMBER_CHARACTER_REGEX = /^[Ee0-9\\+\\-\\.]$/;\nexport function isFloatingPointNumericCharacter(character) {\n    return FLOATING_POINT_NUMBER_CHARACTER_REGEX.test(character);\n}\n/**\n * Round the value to have _up to_ the specified maximum precision.\n *\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\n * more precise values, resulting in shorter strings.\n */\nexport function toMaxPrecision(value, maxPrecision) {\n    // round the value to have the specified maximum precision (toFixed is the wrong choice,\n    // because it would show trailing zeros in the decimal part out to the specified precision)\n    // source: http://stackoverflow.com/a/18358056/5199574\n    var scaleFactor = Math.pow(10, maxPrecision);\n    return Math.round(value * scaleFactor) / scaleFactor;\n}\n//# sourceMappingURL=numericInputUtils.js.map"]},"metadata":{},"sourceType":"module"}