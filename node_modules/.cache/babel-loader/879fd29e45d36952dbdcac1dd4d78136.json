{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA, arrB, compare) {\n  if (compare === void 0) {\n    compare = function (a, b) {\n      return a === b;\n    };\n  } // treat `null` and `undefined` as the same\n\n\n  if (arrA == null && arrB == null) {\n    return true;\n  } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n    return false;\n  } else {\n    return arrA.every(function (a, i) {\n      return compare(a, arrB[i]);\n    });\n  }\n}\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n * @returns true if items are equal.\n */\n\nexport function shallowCompareKeys(objA, objB, keys) {\n  // treat `null` and `undefined` as the same\n  if (objA == null && objB == null) {\n    return true;\n  } else if (objA == null || objB == null) {\n    return false;\n  } else if (Array.isArray(objA) || Array.isArray(objB)) {\n    return false;\n  } else if (keys != null) {\n    return _shallowCompareKeys(objA, objB, keys);\n  } else {\n    // shallowly compare all keys from both objects\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    return _shallowCompareKeys(objA, objB, {\n      include: keysA\n    }) && _shallowCompareKeys(objA, objB, {\n      include: keysB\n    });\n  }\n}\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n * @returns true if items are equal.\n */\n\nexport function deepCompareKeys(objA, objB, keys) {\n  if (objA === objB) {\n    return true;\n  } else if (objA == null && objB == null) {\n    // treat `null` and `undefined` as the same\n    return true;\n  } else if (objA == null || objB == null) {\n    return false;\n  } else if (Array.isArray(objA) || Array.isArray(objB)) {\n    return arraysEqual(objA, objB, deepCompareKeys);\n  } else if (_isSimplePrimitiveType(objA) || _isSimplePrimitiveType(objB)) {\n    return objA === objB;\n  } else if (keys != null) {\n    return _deepCompareKeys(objA, objB, keys);\n  } else if (objA.constructor !== objB.constructor) {\n    return false;\n  } else {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n\n    if (keysA == null || keysB == null) {\n      return false;\n    }\n\n    if (keysA.length === 0 && keysB.length === 0) {\n      return true;\n    }\n\n    return arraysEqual(keysA, keysB) && _deepCompareKeys(objA, objB, keysA);\n  }\n}\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\n\nexport function getDeepUnequalKeyValues(objA, objB, keys) {\n  if (objA === void 0) {\n    objA = {};\n  }\n\n  if (objB === void 0) {\n    objB = {};\n  }\n\n  var filteredKeys = keys == null ? _unionKeys(objA, objB) : keys;\n  return _getUnequalKeyValues(objA, objB, filteredKeys, function (a, b, key) {\n    return deepCompareKeys(a, b, [key]);\n  });\n} // Private helpers\n// ===============\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\n\nfunction _shallowCompareKeys(objA, objB, keys) {\n  return _filterKeys(objA, objB, keys).every(function (key) {\n    return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n  });\n}\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\n\n\nfunction _deepCompareKeys(objA, objB, keys) {\n  return keys.every(function (key) {\n    return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n  });\n}\n\nfunction _isSimplePrimitiveType(value) {\n  return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\n\nfunction _filterKeys(objA, objB, keys) {\n  if (_isWhitelist(keys)) {\n    return keys.include;\n  } else if (_isBlacklist(keys)) {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB); // merge keys from both objects into a big set for quick access\n\n    var keySet_1 = _arrayToObject(keysA.concat(keysB)); // delete blacklisted keys from the key set\n\n\n    keys.exclude.forEach(function (key) {\n      return delete keySet_1[key];\n    }); // return the remaining keys as an array\n\n    return Object.keys(keySet_1);\n  }\n\n  return [];\n}\n\nfunction _isWhitelist(keys) {\n  return keys != null && keys.include != null;\n}\n\nfunction _isBlacklist(keys) {\n  return keys != null && keys.exclude != null;\n}\n\nfunction _arrayToObject(arr) {\n  return arr.reduce(function (obj, element) {\n    obj[element] = true;\n    return obj;\n  }, {});\n}\n\nfunction _getUnequalKeyValues(objA, objB, keys, compareFn) {\n  var unequalKeys = keys.filter(function (key) {\n    return !compareFn(objA, objB, key);\n  });\n  var unequalKeyValues = unequalKeys.map(function (key) {\n    return {\n      key: key,\n      valueA: objA[key],\n      valueB: objB[key]\n    };\n  });\n  return unequalKeyValues;\n}\n\nfunction _unionKeys(objA, objB) {\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  var concatKeys = keysA.concat(keysB);\n\n  var keySet = _arrayToObject(concatKeys);\n\n  return Object.keys(keySet);\n}","map":{"version":3,"sources":["../../../../src/common/utils/compareUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA, arrB, compare) {\n    if (compare === void 0) { compare = function (a, b) { return a === b; }; }\n    // treat `null` and `undefined` as the same\n    if (arrA == null && arrB == null) {\n        return true;\n    }\n    else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n        return false;\n    }\n    else {\n        return arrA.every(function (a, i) { return compare(a, arrB[i]); });\n    }\n}\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n * @returns true if items are equal.\n */\nexport function shallowCompareKeys(objA, objB, keys) {\n    // treat `null` and `undefined` as the same\n    if (objA == null && objB == null) {\n        return true;\n    }\n    else if (objA == null || objB == null) {\n        return false;\n    }\n    else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return false;\n    }\n    else if (keys != null) {\n        return _shallowCompareKeys(objA, objB, keys);\n    }\n    else {\n        // shallowly compare all keys from both objects\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        return (_shallowCompareKeys(objA, objB, { include: keysA }) && _shallowCompareKeys(objA, objB, { include: keysB }));\n    }\n}\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n * @returns true if items are equal.\n */\nexport function deepCompareKeys(objA, objB, keys) {\n    if (objA === objB) {\n        return true;\n    }\n    else if (objA == null && objB == null) {\n        // treat `null` and `undefined` as the same\n        return true;\n    }\n    else if (objA == null || objB == null) {\n        return false;\n    }\n    else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return arraysEqual(objA, objB, deepCompareKeys);\n    }\n    else if (_isSimplePrimitiveType(objA) || _isSimplePrimitiveType(objB)) {\n        return objA === objB;\n    }\n    else if (keys != null) {\n        return _deepCompareKeys(objA, objB, keys);\n    }\n    else if (objA.constructor !== objB.constructor) {\n        return false;\n    }\n    else {\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        if (keysA == null || keysB == null) {\n            return false;\n        }\n        if (keysA.length === 0 && keysB.length === 0) {\n            return true;\n        }\n        return arraysEqual(keysA, keysB) && _deepCompareKeys(objA, objB, keysA);\n    }\n}\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getDeepUnequalKeyValues(objA, objB, keys) {\n    if (objA === void 0) { objA = {}; }\n    if (objB === void 0) { objB = {}; }\n    var filteredKeys = keys == null ? _unionKeys(objA, objB) : keys;\n    return _getUnequalKeyValues(objA, objB, filteredKeys, function (a, b, key) {\n        return deepCompareKeys(a, b, [key]);\n    });\n}\n// Private helpers\n// ===============\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction _shallowCompareKeys(objA, objB, keys) {\n    return _filterKeys(objA, objB, keys).every(function (key) {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n    });\n}\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction _deepCompareKeys(objA, objB, keys) {\n    return keys.every(function (key) {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n    });\n}\nfunction _isSimplePrimitiveType(value) {\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\nfunction _filterKeys(objA, objB, keys) {\n    if (_isWhitelist(keys)) {\n        return keys.include;\n    }\n    else if (_isBlacklist(keys)) {\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        // merge keys from both objects into a big set for quick access\n        var keySet_1 = _arrayToObject(keysA.concat(keysB));\n        // delete blacklisted keys from the key set\n        keys.exclude.forEach(function (key) { return delete keySet_1[key]; });\n        // return the remaining keys as an array\n        return Object.keys(keySet_1);\n    }\n    return [];\n}\nfunction _isWhitelist(keys) {\n    return keys != null && keys.include != null;\n}\nfunction _isBlacklist(keys) {\n    return keys != null && keys.exclude != null;\n}\nfunction _arrayToObject(arr) {\n    return arr.reduce(function (obj, element) {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\nfunction _getUnequalKeyValues(objA, objB, keys, compareFn) {\n    var unequalKeys = keys.filter(function (key) { return !compareFn(objA, objB, key); });\n    var unequalKeyValues = unequalKeys.map(function (key) { return ({\n        key: key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }); });\n    return unequalKeyValues;\n}\nfunction _unionKeys(objA, objB) {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    var concatKeys = keysA.concat(keysB);\n    var keySet = _arrayToObject(concatKeys);\n    return Object.keys(keySet);\n}\n//# sourceMappingURL=compareUtils.js.map"]},"metadata":{},"sourceType":"module"}